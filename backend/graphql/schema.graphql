type Query {
  users: [User]!
  auth: User
  getUnread(senderIds: [ID!], recipientId: ID!): [UnreadResult]
  fetchChats(userId: ID!, currentUserId: ID!): ChatResponse
  fetchGroups: [Group!]!
  fetchGroupMsgs(groupId: ID!, limit: Int, cursor: String): GroupMessagesResponse!
}

type Mutation {
  sendGroupMessage(groupId: ID!, sender: ID!, content: String!): Message!
}

type User {
  _id: ID
  username: String
  name: String
  email: String
  picture: String
  lastMessage: String
  lastMessageCount: Int
  isOnline: Boolean
  unread: [UnreadMsg]
  phone: String
  gender: String
  address: String
  birthday: String
}

type Group {
  _id: ID!
  name: String!
  members: [User!]!
  description: String
  username: String
  picture: String
  placeholderString: String
  logo: ID
  createdAt: String
}

type UnreadResult {
  senderId: String
  count: Int
  lastMessage: String
  createdAt: String
  updatedAt: String
}

type ChatMessage {
  _id: ID!
  content: String
  sender: User
  receiver: User
  createdAt: String
  updatedAt: String
  imageUrl: String
  placeholderUrl: String
  hasImage: Boolean
}

type UnreadMsg {
  _id: ID!
  sender: User
  recipient: User
  count: Int
  lastMessage: String
  createdAt: String
  updatedAt: String
}

type Message {
  _id: ID
  chat: ID
  sender: String
  receiver: String
  senderName: String
  receiverName: String
  receiverAvatar: String
  senderAvatar: String
  content: String
  createdAt: String
  updatedAt: String
  imageUrl: String
  placeholderUrl: String
  hasImage: Boolean
}

type ChatResponse {
  messages: [ChatMessage!]!
  notifiedUser: User
}

type GroupMessagesResponse {
  messages: [Message!]!
}
